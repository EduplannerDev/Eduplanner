// Script para probar el acceso a grupos despu√©s de la correcci√≥n RLS
// Este script ayuda a verificar si los usuarios ven solo sus propios grupos

import { supabase } from '../lib/supabase'
import { getGruposByOwner } from '../lib/grupos'

async function testGruposAccess() {
  console.log('üîç Probando acceso a grupos despu√©s de la correcci√≥n RLS...\n')
  
  try {
    // Obtener el usuario actual
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      console.error('‚ùå Error de autenticaci√≥n:', authError)
      console.log('üí° Aseg√∫rate de estar autenticado en la aplicaci√≥n')
      return
    }
    
    console.log('üë§ Usuario actual:', user.email)
    
    // Obtener informaci√≥n del perfil del usuario
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('role, plantel_id, full_name')
      .eq('id', user.id)
      .single()
    
    if (profileError) {
      console.error('‚ùå Error obteniendo perfil:', profileError)
      return
    }
    
    console.log(`üë®‚Äçüè´ Rol: ${profile.role}`)
    console.log(`üè´ Plantel ID: ${profile.plantel_id}`)
    console.log(`üìù Nombre: ${profile.full_name}\n`)
    
    // 1. Probar consulta directa sin filtros (RLS deber√≠a aplicar autom√°ticamente)
    console.log('üìã Test 1: Consulta directa sin filtros (RLS activo):')
    const { data: gruposSinFiltro, error: errorSinFiltro } = await supabase
      .from('grupos')
      .select('id, nombre, user_id, plantel_id, activo')
      .order('created_at', { ascending: false })
    
    if (errorSinFiltro) {
      console.error('‚ùå Error sin filtro:', errorSinFiltro)
    } else {
      console.log(`üìä Grupos encontrados: ${gruposSinFiltro?.length || 0}`)
      if (gruposSinFiltro && gruposSinFiltro.length > 0) {
        gruposSinFiltro.forEach(grupo => {
          const esMio = grupo.user_id === user.id
          const emoji = esMio ? '‚úÖ' : '‚ùå'
          console.log(`  ${emoji} ${grupo.nombre} (Owner: ${esMio ? 'YO' : grupo.user_id})`)
        })
        
        // Verificar si hay grupos que no son del usuario
        const gruposAjenos = gruposSinFiltro.filter(g => g.user_id !== user.id)
        if (gruposAjenos.length > 0) {
          console.log(`\n‚ö†Ô∏è  PROBLEMA: Se encontraron ${gruposAjenos.length} grupos que NO son del usuario`)
          console.log('   Esto indica que RLS no est√° funcionando correctamente')
        } else {
          console.log('\n‚úÖ CORRECTO: Solo se muestran grupos del usuario')
        }
      }
    }
    
    // 2. Probar usando la funci√≥n getGruposByOwner
    console.log('\nüìã Test 2: Usando funci√≥n getGruposByOwner():')
    try {
      const gruposFunction = await getGruposByOwner(user.id)
      console.log(`üìä Grupos encontrados: ${gruposFunction.length}`)
      gruposFunction.forEach(grupo => {
        const esMio = grupo.user_id === user.id
        const emoji = esMio ? '‚úÖ' : '‚ùå'
        console.log(`  ${emoji} ${grupo.nombre} (Owner: ${esMio ? 'YO' : grupo.user_id})`)
      })
      
      // Verificar consistencia
      const gruposAjenos = gruposFunction.filter(g => g.user_id !== user.id)
      if (gruposAjenos.length > 0) {
        console.log(`\n‚ö†Ô∏è  PROBLEMA: getGruposByOwner devolvi√≥ ${gruposAjenos.length} grupos ajenos`)
      } else {
        console.log('\n‚úÖ CORRECTO: getGruposByOwner solo devuelve grupos del usuario')
      }
    } catch (error) {
      console.error('‚ùå Error en getGruposByOwner:', error)
    }
    
    // Obtener informaci√≥n del perfil del usuario
    console.log('\nüë§ Informaci√≥n del perfil:')
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('role, plantel_id')
      .eq('id', user.id)
      .single()
    
    if (profileError) {
      console.error('‚ùå Error obteniendo perfil:', profileError)
    } else {
      console.log(`  - Rol: ${profile?.role}`)
      console.log(`  - Plantel ID: ${profile?.plantel_id}`)
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar el test
testGruposAccess()