-- Migration: Create Diary Entry Versions Table
-- Description: Creates table for storing version history of diary entries
-- Author: System
-- Date: 2024-12-14

-- Tabla para almacenar el historial de versiones de las entradas del diario
CREATE TABLE IF NOT EXISTS diary_entry_versions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  entry_id UUID NOT NULL REFERENCES diary_entries(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  version_number INTEGER NOT NULL,
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  date DATE NOT NULL,
  time TIME NOT NULL,
  tags TEXT[] DEFAULT '{}',
  mood TEXT,
  is_private BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL, -- Timestamp de cuando se creó esta versión
  version_created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), -- Timestamp de cuando se guardó en el historial
  UNIQUE(entry_id, version_number)
);

-- Índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_diary_entry_versions_entry_id ON diary_entry_versions(entry_id);
CREATE INDEX IF NOT EXISTS idx_diary_entry_versions_user_id ON diary_entry_versions(user_id);
CREATE INDEX IF NOT EXISTS idx_diary_entry_versions_version_number ON diary_entry_versions(entry_id, version_number);
CREATE INDEX IF NOT EXISTS idx_diary_entry_versions_created_at ON diary_entry_versions(created_at);

-- Política de seguridad RLS (Row Level Security)
ALTER TABLE diary_entry_versions ENABLE ROW LEVEL SECURITY;

-- Eliminar política existente si existe
DROP POLICY IF EXISTS "Users can only access their own diary entry versions" ON diary_entry_versions;

-- Política para diary_entry_versions: los usuarios solo pueden acceder a sus propias versiones
CREATE POLICY "Users can only access their own diary entry versions" ON diary_entry_versions
    FOR ALL USING (auth.uid() = user_id);

-- Función para crear una versión automáticamente antes de actualizar una entrada
CREATE OR REPLACE FUNCTION create_diary_entry_version()
RETURNS TRIGGER AS $$
DECLARE
    next_version_number INTEGER;
BEGIN
    -- Obtener el siguiente número de versión para esta entrada
    SELECT COALESCE(MAX(version_number), 0) + 1
    INTO next_version_number
    FROM diary_entry_versions
    WHERE entry_id = OLD.id;
    
    -- Insertar la versión anterior en la tabla de versiones
    INSERT INTO diary_entry_versions (
        entry_id,
        user_id,
        version_number,
        title,
        content,
        date,
        time,
        tags,
        mood,
        is_private,
        created_at
    ) VALUES (
        OLD.id,
        OLD.user_id,
        next_version_number,
        OLD.title,
        OLD.content,
        OLD.date,
        OLD.time,
        OLD.tags,
        OLD.mood,
        OLD.is_private,
        OLD.updated_at
    );
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger para crear versiones automáticamente antes de actualizar
DROP TRIGGER IF EXISTS create_diary_entry_version_trigger ON diary_entries;
CREATE TRIGGER create_diary_entry_version_trigger
    BEFORE UPDATE ON diary_entries
    FOR EACH ROW
    EXECUTE FUNCTION create_diary_entry_version();

-- Comentarios para documentar la tabla
COMMENT ON TABLE diary_entry_versions IS 'Almacena el historial de versiones de las entradas del diario profesional';
COMMENT ON COLUMN diary_entry_versions.entry_id IS 'ID de la entrada original en diary_entries';
COMMENT ON COLUMN diary_entry_versions.version_number IS 'Número de versión secuencial para cada entrada';
COMMENT ON COLUMN diary_entry_versions.created_at IS 'Timestamp original de cuando se creó esta versión de la entrada';
COMMENT ON COLUMN diary_entry_versions.version_created_at IS 'Timestamp de cuando se guardó esta versión en el historial';

-- Verificación de la migración
DO $$
BEGIN
    RAISE NOTICE 'Migration completed: Diary Entry Versions table created successfully';
    RAISE NOTICE 'Table created: diary_entry_versions';
    RAISE NOTICE 'Indexes created: 4 performance indexes';
    RAISE NOTICE 'Trigger created for automatic version creation on updates';
END $$;